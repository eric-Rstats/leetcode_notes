{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "“chapter03_introduction-to-keras-and-tf.i”的副本",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eric-Rstats/practice-coding/blob/master/deep-learning/chapter3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tlgEDzmhp_PP"
      },
      "source": [
        "This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n",
        "\n",
        "**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n",
        "\n",
        "This notebook was generated for TensorFlow 2.6."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hHASgn6Ip_PR"
      },
      "source": [
        "# Introduction to Keras and TensorFlow"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_JDdCWDsp_PR"
      },
      "source": [
        "## What's TensorFlow?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AXc7Br-Dp_PS"
      },
      "source": [
        "## What's Keras?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ok4RF_8yp_PS"
      },
      "source": [
        "## Keras and TensorFlow: a brief history"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "thZ59Tyop_PS"
      },
      "source": [
        "## Setting up a deep-learning workspace"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hN5C0AHqp_PS"
      },
      "source": [
        "### Jupyter notebooks: the preferred way to run deep-learning experiments"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YkasCr9Sp_PT"
      },
      "source": [
        "### Using Colaboratory"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "arHUcljNp_PT"
      },
      "source": [
        "#### First steps with Colaboratory"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CeRFl8ctp_PT"
      },
      "source": [
        "#### Installing packages with `pip`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3uDHOn6-p_PT"
      },
      "source": [
        "#### Using the GPU runtime"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uGDbIVu_p_PU"
      },
      "source": [
        "## First steps with TensorFlow"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wJos8RScp_PU"
      },
      "source": [
        "#### Constant tensors and Variables"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CTlAemUQp_PU"
      },
      "source": [
        "**All-ones or all-zeros tensors**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LxCIrnYcaMkX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0efbdb4a-7f01-4bf0-b117-602a49ddfe5f"
      },
      "source": [
        "import tensorflow as tf\n",
        "x = tf.ones(shape=(2,1))\n",
        "print(x)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[[1.]\n",
            " [1.]], shape=(2, 1), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ca_ut8MZp_PV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a33fbfec-7d21-453f-d5e2-6e99becf42ed"
      },
      "source": [
        "x = tf.zeros(shape=(2, 1))\n",
        "print(x)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[[0.]\n",
            " [0.]], shape=(2, 1), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bi4m-zZvp_PV"
      },
      "source": [
        "**Random tensors**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y1_ahJRLp_PV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29f9c8af-98d3-4f63-bb03-7dea3613efa0"
      },
      "source": [
        "x = tf.random.normal(shape=(3, 1), mean=0., stddev=1.)\n",
        "print(x)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[[ 0.4908137 ]\n",
            " [-1.2790209 ]\n",
            " [ 0.23282304]], shape=(3, 1), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LlJxT3KCp_PV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f092df50-b83c-44ba-ccbb-9467d093ae72"
      },
      "source": [
        "x = tf.random.uniform(shape=(3, 1), minval=0., maxval=1.)\n",
        "print(x)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[[0.69277656]\n",
            " [0.6756388 ]\n",
            " [0.09662199]], shape=(3, 1), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9dBncuSnp_PV"
      },
      "source": [
        "**NumPy arrays are assignable**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QVlIw_prp_PV"
      },
      "source": [
        "import numpy as np\n",
        "x = np.ones(shape=(2, 2))\n",
        "x[0, 0] = 0."
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ar3HBM7p_PV"
      },
      "source": [
        "**Creating a Variable**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kQxPjDandv1y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bbb9feda-9072-4f11-ee62-788bd8003118"
      },
      "source": [
        "v = tf.Variable(initial_value=tf.random.normal(shape=(3,1)))\n",
        "print(v)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<tf.Variable 'Variable:0' shape=(3, 1) dtype=float32, numpy=\n",
            "array([[-1.2106029 ],\n",
            "       [ 0.74665374],\n",
            "       [-1.5407519 ]], dtype=float32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tGu3TA01p_PW"
      },
      "source": [
        "**Assigning a value to a Variable**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ioSyiljhp_PW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63fdb4c8-767e-403f-88be-5c0e70c80585"
      },
      "source": [
        "v.assign(tf.ones((3, 1)))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Variable 'UnreadVariable' shape=(3, 1) dtype=float32, numpy=\n",
              "array([[1.],\n",
              "       [1.],\n",
              "       [1.]], dtype=float32)>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A_EiYBwGp_PW"
      },
      "source": [
        "**Assigning a value to a subset of a Variable**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3qG0xwi_p_PW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4bfbad13-2ed2-446a-c3e5-11ce390fe368"
      },
      "source": [
        "v[0, 0].assign(3.)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Variable 'UnreadVariable' shape=(3, 1) dtype=float32, numpy=\n",
              "array([[3.],\n",
              "       [1.],\n",
              "       [1.]], dtype=float32)>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wAZaopQM4Let",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5d5e5c3-530d-40fe-dd42-5c4c43f8e243"
      },
      "source": [
        "print(v)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<tf.Variable 'Variable:0' shape=(3, 1) dtype=float32, numpy=\n",
            "array([[3.],\n",
            "       [1.],\n",
            "       [1.]], dtype=float32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9K1D0l0Ap_PW"
      },
      "source": [
        "**Using assign_add**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VfbCsa7gp_PW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e651cdee-2dde-4c74-cb72-6862c76b79cb"
      },
      "source": [
        "v.assign_add(tf.ones((3, 1)))"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Variable 'UnreadVariable' shape=(3, 1) dtype=float32, numpy=\n",
              "array([[4.],\n",
              "       [2.],\n",
              "       [2.]], dtype=float32)>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v5JV8KLkp_PX"
      },
      "source": [
        "#### Tensor operations: doing math in TensorFlow"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "quGENm6Zp_PX"
      },
      "source": [
        "**A few basic math operations**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pw6lpHs2p_PX"
      },
      "source": [
        "a = tf.ones((2, 2))\n",
        "b = tf.square(a)\n",
        "c = tf.sqrt(a)\n",
        "d = b + c\n",
        "e = tf.matmul(a, b)\n",
        "e *= d"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yDWvILT9p_PX"
      },
      "source": [
        "#### A second look at the `GradientTape` API"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WebA2Mhjp_PX"
      },
      "source": [
        "**Using the GradientTape**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2DiuAd31gsFY"
      },
      "source": [
        "input_var = tf.Variable(initial_value=3.)\n",
        "with tf.GradientTape() as tape:\n",
        "  result = tf.square(input_var)\n",
        "\n",
        "gradient = tape.gradient(result, input_var)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xu32CAA7g9bY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2fce1a3f-d229-4773-ed1d-20949c7559dc"
      },
      "source": [
        "print(gradient, result) # x^2导数为2x"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(6.0, shape=(), dtype=float32) tf.Tensor(9.0, shape=(), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SIk12qWBp_PX"
      },
      "source": [
        "**Using the GradientTape with constant tensor inputs**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jp4O0YXpp_PY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3acd5f7-6dea-4ab4-c197-9f83a0f135c0"
      },
      "source": [
        "# 原本是常量，如何使用autogradient\n",
        "input_const = tf.constant(3.)\n",
        "with tf.GradientTape() as tape:\n",
        "   tape.watch(input_const)\n",
        "   result = tf.square(input_const)\n",
        "gradient = tape.gradient(result, input_const)\n",
        "print(gradient, result, input_const)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(6.0, shape=(), dtype=float32) tf.Tensor(9.0, shape=(), dtype=float32) tf.Tensor(3.0, shape=(), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0i4UFH77p_PY"
      },
      "source": [
        "**Using nested gradient tapes to compute second-order gradients**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n2NwVjnXi3hw",
        "outputId": "a6c0772e-8435-45e9-a11d-3015c1711186"
      },
      "source": [
        "time = tf.Variable(0.)\n",
        "with tf.GradientTape() as outer_tape:\n",
        "  with tf.GradientTape() as inner_tape:\n",
        "    position = 4.9 * time ** 2\n",
        "  speed = inner_tape.gradient(position, time)\n",
        "acceleration = outer_tape.gradient(speed, time)\n",
        "\n",
        "\n",
        "print(acceleration, speed)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(9.8, shape=(), dtype=float32) tf.Tensor(0.0, shape=(), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LzJBRu6Xp_PY"
      },
      "source": [
        "#### An end-to-end example: a linear classifier in pure TensorFlow"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wt-NgUmRp_PY"
      },
      "source": [
        "**Generating two classes of random points in a 2D plane**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "upHrItt-kMWB"
      },
      "source": [
        "num_samples_per_class = 1000\n",
        "negative_samples = np.random.multivariate_normal(\n",
        "    mean=[0,3], cov=[[1, 0.5],[0.5, 1]], size=num_samples_per_class\n",
        ")\n",
        "positive_samples = np.random.multivariate_normal(\n",
        "    mean=[3, 0], cov=[[1, 0.5],[0.5, 1]], size=num_samples_per_class)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S-rJmgD0p_PY"
      },
      "source": [
        "**Stacking the two classes into an array with shape (2000, 2)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dXpfrh8lk1_B"
      },
      "source": [
        "inputs = np.vstack((negative_samples, positive_samples)).astype(np.float32)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ajzfxd79k9u0",
        "outputId": "945de81c-7852-4600-b4f7-a3283a556980"
      },
      "source": [
        "inputs.shape"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2000, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8tZtNg5Up_PZ"
      },
      "source": [
        "**Generating the corresponding targets (0 and 1)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5MUmOXFSp_PZ"
      },
      "source": [
        "targets = np.vstack((np.zeros((num_samples_per_class, 1), dtype=\"float32\"),\n",
        "                     np.ones((num_samples_per_class, 1), dtype=\"float32\")))"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3sj7iz6dlN08",
        "outputId": "c970cb20-664b-430f-aa88-8a022155e63a"
      },
      "source": [
        "targets"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.],\n",
              "       [0.],\n",
              "       [0.],\n",
              "       ...,\n",
              "       [1.],\n",
              "       [1.],\n",
              "       [1.]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XaPC7JJlp_PZ"
      },
      "source": [
        "**Plotting the two point classes**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I-wfKVk-p_PZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "1c192d2d-ee72-44ef-e1e6-fd011b896498"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.scatter(inputs[:, 0], inputs[:, 1], c=targets[:, 0])\n",
        "plt.show()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rw0qIX8Vp_PZ"
      },
      "source": [
        "**Creating the linear classifier variables**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eq3CwyeJmLKB"
      },
      "source": [
        "input_dim = 2\n",
        "output_dim = 1\n",
        "W = tf.Variable(initial_value=tf.random.uniform(shape=(input_dim, output_dim)))\n",
        "b = tf.Variable(initial_value=tf.zeros(shape=(output_dim, )))"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9xtdc4A6p_Pa"
      },
      "source": [
        "**The forward pass function**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zofKejbZmkFn"
      },
      "source": [
        "def model(inputs):\n",
        "  return tf.matmul(inputs, W) + b"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mWyPAJHSp_Pa"
      },
      "source": [
        "**The mean squared error loss function**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_fYraWabm1pb"
      },
      "source": [
        "def square_loss(targets, predictions):\n",
        "  per_sample_losses = tf.square(targets - predictions)\n",
        "  return tf.reduce_mean(per_sample_losses)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R8POohG-p_Pa"
      },
      "source": [
        "**The training step function**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vXPnLQD_nGCS"
      },
      "source": [
        "learning_rate = 0.1\n",
        "\n",
        "def training_step(inputs, targets):\n",
        "  with tf.GradientTape() as tape:\n",
        "    predictions = model(inputs)\n",
        "    loss = square_loss(predictions, targets)\n",
        "  grad_loss_wrt_W, grad_loss_wrt_b = tape.gradient(loss, [W, b])\n",
        "  W.assign_sub(grad_loss_wrt_W * learning_rate)\n",
        "  b.assign_sub(grad_loss_wrt_b * learning_rate)\n",
        "  return loss\n"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BwdH5zkMp_Pa"
      },
      "source": [
        "**The batch training loop**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HRRtx49Jp_Pa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65560894-fa56-4e7e-ed77-2045836f4f85"
      },
      "source": [
        "for step in range(20):\n",
        "    loss = training_step(inputs, targets)\n",
        "    print(f\"Loss at step {step}: {loss:.4f}\")"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loss at step 0: 5.5405\n",
            "Loss at step 1: 0.3979\n",
            "Loss at step 2: 0.1634\n",
            "Loss at step 3: 0.1275\n",
            "Loss at step 4: 0.1158\n",
            "Loss at step 5: 0.1077\n",
            "Loss at step 6: 0.1005\n",
            "Loss at step 7: 0.0940\n",
            "Loss at step 8: 0.0880\n",
            "Loss at step 9: 0.0826\n",
            "Loss at step 10: 0.0776\n",
            "Loss at step 11: 0.0731\n",
            "Loss at step 12: 0.0690\n",
            "Loss at step 13: 0.0652\n",
            "Loss at step 14: 0.0617\n",
            "Loss at step 15: 0.0586\n",
            "Loss at step 16: 0.0557\n",
            "Loss at step 17: 0.0530\n",
            "Loss at step 18: 0.0506\n",
            "Loss at step 19: 0.0484\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sb-o8sJNp_Pb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "87800fb5-171e-4453-aacd-333e71fad6df"
      },
      "source": [
        "predictions = model(inputs)\n",
        "plt.scatter(inputs[:, 0], inputs[:, 1], c=predictions[:, 0] > 0.5)\n",
        "plt.show()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h-ZWK_i7p_Pb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "2b57a382-4c15-4bb6-c477-0a92973604d6"
      },
      "source": [
        "x = np.linspace(-1, 4, 100)\n",
        "y = - W[0] /  W[1] * x + (0.5 - b) / W[1]\n",
        "plt.plot(x, y, \"-r\")\n",
        "plt.scatter(inputs[:, 0], inputs[:, 1], c=predictions[:, 0] > 0.5)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f826abd9ad0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IiNdZgr2p_Pb"
      },
      "source": [
        "## Anatomy of a neural network: understanding core Keras APIs"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y5yrvno3p_Pb"
      },
      "source": [
        "### Layers: the building blocks of deep learning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8d7_36QXp_Pb"
      },
      "source": [
        "#### The base `Layer` class in Keras"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "np_Yuaicp_Pc"
      },
      "source": [
        "from tensorflow import keras\n",
        "\n",
        "class SimpleDense(keras.layers.Layer):\n",
        "\n",
        "    def __init__(self, units, activation=None):\n",
        "        super().__init__()\n",
        "        self.units = units\n",
        "        self.activation = activation\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        input_dim = input_shape[-1]\n",
        "        self.W = self.add_weight(shape=(input_dim, self.units),\n",
        "                                 initializer=\"random_normal\")\n",
        "        self.b = self.add_weight(shape=(self.units,),\n",
        "                                 initializer=\"zeros\")\n",
        "\n",
        "    def call(self, inputs):\n",
        "        y = tf.matmul(inputs, self.W) + self.b\n",
        "        if self.activation is not None:\n",
        "            y = self.activation(y)\n",
        "        return y"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AUrfrC6up_Pc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5252eb3-a6dd-4ff8-af62-3f69e4897012"
      },
      "source": [
        "my_dense = SimpleDense(units=32, activation=tf.nn.relu)\n",
        "input_tensor = tf.ones(shape=(2, 784))\n",
        "output_tensor = my_dense(input_tensor)\n",
        "print(output_tensor.shape)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2, 32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Epp1SK6Tp_Pc"
      },
      "source": [
        "#### Automatic shape inference: building layers on the fly"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_2zsnbKup_Pc"
      },
      "source": [
        "from tensorflow.keras import layers\n",
        "layer = layers.Dense(32, activation=\"relu\")"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GceQkFmYp_Pc"
      },
      "source": [
        "from tensorflow.keras import models\n",
        "from tensorflow.keras import layers\n",
        "model = models.Sequential([\n",
        "    layers.Dense(32, activation=\"relu\"),\n",
        "    layers.Dense(32)\n",
        "])"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xw78Odphp_Pc"
      },
      "source": [
        "model = keras.Sequential([\n",
        "    SimpleDense(32, activation=\"relu\"),\n",
        "    SimpleDense(64, activation=\"relu\"),\n",
        "    SimpleDense(32, activation=\"relu\"),\n",
        "    SimpleDense(10, activation=\"softmax\")\n",
        "])"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r3_-_Gw5p_Pd"
      },
      "source": [
        "### From layers to models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g-yelmCzp_Pd"
      },
      "source": [
        "### The \"compile\" step: configuring the learning process"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0vUZkWvdp_Pd"
      },
      "source": [
        "model = keras.Sequential([keras.layers.Dense(1)])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"mean_squared_error\",\n",
        "              metrics=[\"accuracy\"])"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s5co57Dmp_Pd"
      },
      "source": [
        "model.compile(optimizer=keras.optimizers.RMSprop(),\n",
        "              loss=keras.losses.MeanSquaredError(),\n",
        "              metrics=[keras.metrics.BinaryAccuracy()])"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ehzzd7S-p_Pd"
      },
      "source": [
        "### Picking a loss function"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sIf957q-p_Pd"
      },
      "source": [
        "### Understanding the \"fit\" method"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2cpIyh0Hp_Pd"
      },
      "source": [
        "**Calling `fit` with NumPy data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e_-cZ3lUp_Pd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "83e491b7-776b-4f4f-d56e-3fcb43d4ba1e"
      },
      "source": [
        "history = model.fit(\n",
        "    inputs,\n",
        "    targets,\n",
        "    epochs=5,\n",
        "    batch_size=128\n",
        ")"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "16/16 [==============================] - 0s 1ms/step - loss: 11.6143 - binary_accuracy: 0.0460\n",
            "Epoch 2/5\n",
            "16/16 [==============================] - 0s 1ms/step - loss: 11.2021 - binary_accuracy: 0.0470\n",
            "Epoch 3/5\n",
            "16/16 [==============================] - 0s 1ms/step - loss: 10.8476 - binary_accuracy: 0.0485\n",
            "Epoch 4/5\n",
            "16/16 [==============================] - 0s 1ms/step - loss: 10.5069 - binary_accuracy: 0.0505\n",
            "Epoch 5/5\n",
            "16/16 [==============================] - 0s 1ms/step - loss: 10.1754 - binary_accuracy: 0.0520\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CO7djQb1p_Pe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e615aed-fe74-4c18-ac6d-6f5274b01441"
      },
      "source": [
        "history.history"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'binary_accuracy': [0.04600000008940697,\n",
              "  0.04699999839067459,\n",
              "  0.048500001430511475,\n",
              "  0.05050000175833702,\n",
              "  0.052000001072883606],\n",
              " 'loss': [11.614343643188477,\n",
              "  11.20211410522461,\n",
              "  10.847551345825195,\n",
              "  10.506867408752441,\n",
              "  10.175382614135742]}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mlwx_fIgp_Pe"
      },
      "source": [
        "### Monitoring loss & metrics on validation data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KB_1qitNp_Pe"
      },
      "source": [
        "**Using the validation data argument**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uSLPeMJpp_Pe"
      },
      "source": [
        "model = keras.Sequential([keras.layers.Dense(1)])\n",
        "model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.1),\n",
        "              loss=keras.losses.MeanSquaredError(),\n",
        "              metrics=[keras.metrics.BinaryAccuracy()])\n",
        "\n",
        "indices_permutation = np.random.permutation(len(inputs))\n",
        "shuffled_inputs = inputs[indices_permutation]\n",
        "shuffled_targets = targets[indices_permutation]\n",
        "\n",
        "num_validation_samples = int(0.3 * len(inputs))\n",
        "val_inputs = shuffled_inputs[-num_validation_samples:]\n",
        "val_targets = shuffled_targets[-num_validation_samples:]\n",
        "training_inputs = shuffled_inputs[:num_validation_samples]\n",
        "training_targets = shuffled_targets[:num_validation_samples]\n",
        "model.fit(\n",
        "    training_inputs,\n",
        "    training_targets,\n",
        "    epochs=5,\n",
        "    batch_size=16,\n",
        "    validation_data=(val_inputs, val_targets)\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D-pCrJPDq94K",
        "outputId": "667aaa64-1296-4f8c-8044-1af7d05e4ffd"
      },
      "source": [
        "model = keras.Sequential([keras.layers.Dense(1)])\n",
        "model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.1),\n",
        "              loss=keras.losses.MeanSquaredError(),\n",
        "              metrics=[keras.metrics.BinaryAccuracy()])\n",
        "\n",
        "indices_permutation = np.random.permutation(len(inputs))\n",
        "shuffled_inputs = inputs[indices_permutation]\n",
        "shuffled_targets = targets[indices_permutation]\n",
        "\n",
        "num_validation_samples = int(0.3*len(inputs))\n",
        "val_inputs = shuffled_inputs[-num_validation_samples:]\n",
        "val_targets = shuffled_targets[-num_validation_samples:]\n",
        "training_inputs = shuffled_inputs[:num_validation_samples]\n",
        "training_targets = shuffled_targets[:num_validation_samples]\n",
        "\n",
        "model.fit(\n",
        "    training_inputs,\n",
        "    training_targets,\n",
        "    epochs=5,\n",
        "    batch_size=16,\n",
        "    validation_data=(val_inputs, val_targets)\n",
        ")"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "38/38 [==============================] - 1s 6ms/step - loss: 0.9038 - binary_accuracy: 0.7300 - val_loss: 0.1556 - val_binary_accuracy: 0.6983\n",
            "Epoch 2/5\n",
            "38/38 [==============================] - 0s 4ms/step - loss: 0.0755 - binary_accuracy: 0.9583 - val_loss: 0.1844 - val_binary_accuracy: 0.8017\n",
            "Epoch 3/5\n",
            "38/38 [==============================] - 0s 3ms/step - loss: 0.0599 - binary_accuracy: 0.9617 - val_loss: 0.0689 - val_binary_accuracy: 0.9850\n",
            "Epoch 4/5\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 0.0703 - binary_accuracy: 0.9567 - val_loss: 0.0581 - val_binary_accuracy: 0.9850\n",
            "Epoch 5/5\n",
            "38/38 [==============================] - 0s 3ms/step - loss: 0.0732 - binary_accuracy: 0.9517 - val_loss: 0.0341 - val_binary_accuracy: 0.9967\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f826a17f050>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_qlrCSTlp_Pe"
      },
      "source": [
        "### Inference: using a model after training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NbM2qaSGp_Pe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b1ecca0c-f357-4dfc-cdd4-ee3afa67688c"
      },
      "source": [
        "predictions = model.predict(val_inputs, batch_size=128)\n",
        "print(predictions[:10])"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 0.71203077]\n",
            " [ 0.8065876 ]\n",
            " [ 0.18225297]\n",
            " [ 0.77883327]\n",
            " [-0.09659511]\n",
            " [ 1.0222378 ]\n",
            " [ 0.8551266 ]\n",
            " [ 1.0219469 ]\n",
            " [ 0.73476416]\n",
            " [ 0.9269476 ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xkiyOemup_Pe"
      },
      "source": [
        "## Chapter summary"
      ]
    }
  ]
}